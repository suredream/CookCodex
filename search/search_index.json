{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#welcome-to-cookcodex","title":"Welcome to CookCodex","text":"<p>This is a demonstration of an ai-team documentation system built with the CookCodex methodology.</p>"},{"location":"01_development_guide/","title":"01 development guide","text":""},{"location":"01_development_guide/#development-guide","title":"Development Guide","text":"<p>Welcome, developer! This guide outlines the documentation structure and the workflow for maintaining and extending this project, following the CookCodex methodology. Adhering to this guide is crucial for efficient collaboration, both with human teammates and our GenAI co-pilot.</p>"},{"location":"01_development_guide/#documentation-philosophy","title":"Documentation Philosophy","text":"<p>Our documentation follows two core principles:</p> <ol> <li>Single Source of Truth: Every piece of information has one and only one canonical location. Other documents should link to it, not copy it.</li> <li>Human-Readable vs. AI-Context: We maintain separate documentation for human deep-reading (<code>/docs</code>) and for providing concise context to the AI (<code>/ai_context</code>).</li> </ol>"},{"location":"01_development_guide/#directory-structure-overview","title":"Directory Structure Overview","text":"<ul> <li><code>README.md</code>: The public-facing entry point.</li> <li><code>/docs</code>: The library for human understanding.<ul> <li><code>00_development_guide.md</code>: This very file. The project's \"how-to\".</li> <li><code>01_tour.md</code>: A user-focused walkthrough.</li> <li><code>02_architecture.md</code>: The definitive description of what the system is.</li> <li><code>03_design_records.md</code>: The definitive history of why the system is designed this way.</li> <li><code>specs/</code>: Detailed plans for new or existing features.</li> </ul> </li> <li><code>/ai_context</code>: The \"brain food\" for our GenAI partner. This is the primary interface for AI-assisted development.</li> <li><code>changelog.md</code>: A running log of all significant changes.</li> </ul>"},{"location":"01_development_guide/#the-development-workflow-how-to-make-a-change","title":"The Development Workflow: How to Make a Change","text":"<p>Whether fixing a bug or adding a feature, follow these steps:</p> <ol> <li>Plan in <code>docs/specs</code> (for new features): Create a new spec file to outline the goal, impact, and design of the new feature.</li> <li>Update Design Records: If the change involves a significant choice, add an entry to <code>docs/03_design_records.md</code>.</li> <li>Update the Architecture: Modify <code>docs/02_architecture.md</code> (for humans) and <code>ai_context/system_overview.md</code> (for AI) to reflect any structural changes.</li> <li>Update the Prompts: If an agent's behavior is changing, update its prompt in <code>ai_context/prompts.md</code>. This is the single source of truth for agent instructions.</li> <li>Write the Code: With all documentation updated, you (or the AI with your guidance) can now implement the code changes. The AI should be pointed to the <code>/ai_context</code> directory for its required context.</li> <li>Update User-Facing Docs: Update <code>docs/01_tour.md</code> or <code>README.md</code> if the change affects the user experience.</li> <li>Log the Change: Add a concise entry to <code>changelog.md</code>.</li> </ol> <p>By following this \"documentation-first\" approach, we ensure our project remains clear, maintainable, and easy to collaborate on.</p>"},{"location":"02_architecture/","title":"Architecture","text":""},{"location":"02_architecture/#system-architecture","title":"System Architecture","text":"<p>This document describes the technical architecture of the TerraMind AI Co-Pilot.</p>"},{"location":"02_architecture/#high-level-diagram","title":"High-Level Diagram","text":"<p>(Insert your architecture diagram here, showing agents and data flow, e.g., using Mermaid or a PNG image.)</p>"},{"location":"02_architecture/#agent-profiles","title":"Agent Profiles","text":""},{"location":"02_architecture/#1-rootagent-orchestrator","title":"1. RootAgent (Orchestrator)","text":"<ul> <li>Role: The main coordinator that directs user queries through a fixed workflow.</li> <li>Model: <code>gemini-2.5-pro</code></li> </ul>"},{"location":"02_architecture/#2-guardagent","title":"2. GuardAgent","text":"<ul> <li>Role: Acts as a gatekeeper to validate all incoming queries for scope (F1) and capability (F6).</li> <li>Model: <code>gemini-1.5-flash-latest</code></li> </ul>"},{"location":"02_architecture/#3-planneragent","title":"3. PlannerAgent","text":"<ul> <li>Role: Collaborates with the user via dialogue to create a detailed JSON analysis plan.</li> <li>Model: <code>gemini-2.5-pro</code></li> </ul>"},{"location":"02_architecture/#4-coderagent","title":"4. CoderAgent","text":"<ul> <li>Role: Takes the final JSON plan and generates executable Google Earth Engine code and a cost estimate.</li> <li>Model: <code>gemini-2.5-pro</code></li> </ul>"},{"location":"03_design_records/","title":"Design Records","text":""},{"location":"03_design_records/#architectural-design-records-adr","title":"Architectural Design Records (ADR)","text":"<p>This document chronicles the key design decisions made during the development of TerraMind.</p>"},{"location":"03_design_records/#adr-001-multi-agent-vs-monolithic-agent","title":"ADR-001: Multi-Agent vs. Monolithic Agent","text":"<ul> <li>Decision: We chose a multi-agent architecture with specialized roles.</li> <li>Rationale: To increase reliability and maintainability by assigning each agent a single, well-defined responsibility. This allows for simpler prompts and easier debugging.</li> <li>Date: YYYY-MM-DD</li> </ul>"},{"location":"03_design_records/#adr-002-introduction-of-a-json-plan-as-an-intermediate-step","title":"ADR-002: Introduction of a JSON Plan as an Intermediate Step","text":"<ul> <li>Decision: The <code>PlannerAgent</code>'s final output is a structured JSON plan that requires user approval before code generation.</li> <li>Rationale: This creates a crucial checkpoint, ensuring user-AI alignment and providing the <code>CoderAgent</code> with an unambiguous, structured input, reducing errors.</li> <li>Date: YYYY-MM-DD</li> </ul>"},{"location":"04_tour/","title":"Tour","text":""},{"location":"04_tour/#quick-tour-from-idea-to-code","title":"Quick Tour: From Idea to Code","text":"<p>This tour demonstrates a typical user interaction with TerraMind, showing how a high-level goal is transformed into ready-to-use code.</p> <p>(Your \"Happy Path\" walkthrough content goes here. Describe a user asking a geospatial question and getting code as a result.)</p>"},{"location":"_prompts/","title":"prompts","text":""},{"location":"_prompts/#agent-prompts","title":"Agent Prompts","text":"<p>This file contains the complete and up-to-date prompts for all agents in the TerraMind system.</p>"},{"location":"_prompts/#guardagent","title":"GuardAgent","text":"<p>Name: GuardAgent Model: gemini-1.5-flash-latest</p> <p>Instruction:</p> <p>You are a security and validation guard for a geospatial AI assistant. You have two primary tasks:</p> <p>Scope Check (F1): Analyze the user's query. If it is NOT related to geospatial analysis (e.g., \"tell me a joke\", \"what is the capital of France?\"), you MUST respond EXACTLY with: \"I am a professional geospatial analysis assistant and cannot answer questions outside this domain.\" Do not delegate or say anything else.</p> <p>Capability Check (F6): If the query IS geospatial, check if it asks for a predictive analysis (e.g., \"predict\", \"forecast\"). If it is a predictive query, you MUST use the log_out_of_scope_question tool with the user's query, and then respond EXACTLY with: \"This is a highly valuable predictive analysis problem. Currently, my capabilities focus primarily on historical data analysis, and I cannot perform predictions at this time. I have recorded your request for future model upgrades.\"</p> <p>Delegate if Valid: If the query is both geospatial AND not predictive, delegate it to the PlannerAgent to continue the conversation.</p>"},{"location":"_prompts/#generated-code","title":"Generated code","text":""},{"location":"_prompts/#planneragent","title":"PlannerAgent","text":"<p>Name: PlannerAgent Model: gemini-2.5-pro</p> <p>Instruction: IGNORE_WHEN_COPYING_START content_copy download Use code with caution. IGNORE_WHEN_COPYING_END</p> <p>You are a friendly and professional geospatial analyst. Your goal is to collaborate with the user to create a detailed analysis plan.</p> <p>Your workflow:</p> <p>Understand and Rephrase (F2): Start by rephrasing the user's request in your own words to confirm you've understood their goal.</p> <p>Gather Information (F3): Ask clarifying questions to get all the necessary details (e.g., specific location, time range, data sources).</p> <p>Propose Methodology (F4): Suggest a technical approach (e.g., \"I suggest we use MODIS data for fire detection...\").</p> <p>Finalize Plan and Ask for Approval: Once the user agrees to all details, your final output MUST be a single JSON object representing the plan, followed immediately by the question: \"Do you approve this plan for code generation?\". Do not say anything else.</p>"},{"location":"_prompts/#generated-code_1","title":"Generated code","text":""},{"location":"_prompts/#coderagent","title":"CoderAgent","text":"<p>Name: CoderAgent Model: gemini-2.5-pro</p> <p>Instruction: IGNORE_WHEN_COPYING_START content_copy download Use code with caution. IGNORE_WHEN_COPYING_END</p> <p>You are an expert Google Earth Engine programmer. You will be given a JSON analysis plan.</p> <p>Your task is to perform two steps in order:</p> <p>Write the Code: First, write the complete, executable GEE Python script that implements the plan.</p> <p>Estimate the Cost (F5): After writing the code, add a section at the end under a \"Cost Estimation\" heading. In this section, analyze the code you just wrote (e.g., the datasets used, the complexity of the operations) and provide a brief, high-level estimate of the computational cost. For example: \"This task is expected to involve processing a large volume of satellite imagery and may consume a moderate amount of GEE computation units.\"</p> <p>Present both the code and the cost estimation in a single, final response.</p>"},{"location":"_prompts/#generated-code_2","title":"Generated code","text":""},{"location":"_prompts/#rootagent","title":"RootAgent","text":"<p>Name: TerraMind_Coordinator Model: gemini-2.5-pro</p> <p>Instruction: IGNORE_WHEN_COPYING_START content_copy download Use code with caution. IGNORE_WHEN_COPYING_END</p> <p>You are the main coordinator for the TerraMind AI assistant. You orchestrate a team of specialized agents.</p> <p>Your workflow is fixed and you MUST follow it precisely:</p> <p>When you receive a user query, your FIRST and ONLY action is to delegate it to the GuardAgent for validation.</p> <p>The GuardAgent will delegate to the PlannerAgent. Let the PlannerAgent handle the entire conversation until it produces a final JSON plan and asks for the user's approval.</p> <p>The user's next response will be their approval or disapproval.</p> <p>If the user's response is affirmative (e.g., \"yes\", \"approved\", \"proceed\"), you will then delegate the task to the CoderAgent, providing it with the JSON plan that was generated in the previous step. If the user does not approve, you will stop.</p> <p>Generated code</p>"},{"location":"readme/","title":"Project README","text":""},{"location":"readme/#cookcodex","title":"CookCodex","text":"<p>A Methodology for Building with AI, Not Just by AI.</p> <p>Author: Jun Xiong (@suredream)</p> <p>CookCodex is a documentation-first development methodology designed for building complex, maintainable projects in the era of Generative AI. It provides a structured framework that treats documentation not as a chore, but as the central blueprint that guides both human developers and their AI collaborators, ensuring clarity, consistency, and efficient co-creation.</p>"},{"location":"readme/#why-use-cookcodex","title":"Why Use CookCodex?","text":"<p>In a traditional workflow, documentation often lags behind code, leading to stale information and ambiguity. When working with AI, this ambiguity is a critical bottleneck. CookCodex solves this by inverting the process.</p> <ul> <li>Reduced Ambiguity: By defining the 'what' and 'why' before implementation, you create a single source of truth that eliminates guesswork for everyone involved.</li> <li>Efficient AI Collaboration: Provide your AI partner with a dedicated, concise, and machine-readable context (<code>/ai_context</code>), leading to more accurate and relevant outputs.</li> <li>Enhanced Maintainability: A new developer (or you, six months from now) can understand the system's architecture and design rationale without having to reverse-engineer the entire codebase.</li> <li>Simplified Onboarding: The <code>/docs</code> directory serves as a comprehensive and always-up-to-date guide for new team members.</li> </ul>"},{"location":"readme/#the-core-principles","title":"The Core Principles","text":"<ol> <li>Docs as the Blueprint: The <code>/docs</code> directory is the canonical source of truth. Code is the implementation of this blueprint.</li> <li>Separate Contexts for Human &amp; AI: Humans get rich, narrative detail. AIs get concise, machine-readable summaries. This optimizes collaboration for both.</li> <li>Log Decisions, Not Just Code: The <code>why</code> is often more critical than the <code>how</code>. Architectural Design Records create an immutable history of your strategic choices.</li> <li>AI is a Leveraged Collaborator: The human is the architect; the AI is the master builder. Use the AI for its strengths while retaining strategic control.</li> </ol>"},{"location":"readme/#project-structure","title":"Project Structure","text":"<p>A project using CookCodex follows this structure:</p> <pre><code>/\n\u251c\u2500\u2500 README.md              # The project's front door and mission statement.\n|\n\u251c\u2500\u2500 docs/                    # HUMAN-READABLE: The complete project library.\n\u2502   \u251c\u2500\u2500 00_development_guide.md # The rulebook for contributing to this project.\n\u2502   \u251c\u2500\u2500 01_tour.md              # A user-focused guide and quick-start.\n\u2502   \u251c\u2500\u2500 02_architecture.md      # The \"What\": The system's complete architecture.\n\u2502   \u251c\u2500\u2500 03_design_records.md    # The \"Why\": A log of key design decisions.\n\u2502   \u2514\u2500\u2500 specs/                  # Detailed specifications for new features.\n\u2502   \u2514\u2500\u2500 cc_prompts/             # Ready-to-use CookCodex prompts\n|\n\u251c\u2500\u2500 ai_context/              # AI-READABLE: The \"brain food\" for your AI collaborator.\n\u2502   \u251c\u2500\u2500 system_overview.md   # A condensed, machine-friendly architecture summary.\n\u2502   \u2514\u2500\u2500 prompts.md           # A library of prompts and instructions for the AI.\n|\n\u2514\u2500\u2500 changelog.md             # A chronological log of all meaningful changes.\n\n....\nthe rest of the parts will be src, tests, data, models, etc.\n\n</code></pre>"},{"location":"readme/#the-cookcodex-workflow","title":"The CookCodex Workflow","text":"<p>Development follows a simple, iterative cycle:</p> <ol> <li><code>SPECIFY</code>: Define a new feature or change in a new file within <code>docs/specs/</code>.</li> <li><code>DOCUMENT</code>: Update the core architecture (<code>docs/02_architecture.md</code>), design records (<code>docs/03_design_records.md</code>), and the AI's context (<code>ai_context/</code>).</li> <li><code>IMPLEMENT</code>: Write the code, either manually or by guiding an AI using the context in <code>/ai_context</code>.</li> <li><code>ITERATE</code>: Test the implementation, refine the documentation as needed, and log the final change in <code>changelog.md</code>.</li> </ol>"},{"location":"readme/#getting-started-initialize-a-project","title":"Getting Started: Initialize a Project","text":"<p>You can instantly scaffold a new project with the CookCodex structure using our initialization script. Run the following command in your terminal:</p> <pre><code># Replace the URL with the Raw URL of your Gist\n# curl -sSL https://gist.githubusercontent.com/[YOUR_USERNAME]/[YOUR_GIST_ID]/raw/init_cookcodex.sh | bash\n</code></pre> <p>This will create a new project directory, fully populated with the template files, ready for you to start building.</p>"},{"location":"readme/#the-helper-prompts-you-can-used","title":"The helper prompts you can used","text":"<p>There are a few fundamental prompts in the <code>docs/cc_prompts</code> folder that you can fill your</p> <p>under either <code>cline</code> or <code>roo code</code>, use @file to apply the followings prompts to your projects.</p>"},{"location":"readme/#changelog","title":"Changelog","text":"<p>For a detailed history of changes, see the Changelog.</p>"},{"location":"cc_prompts/create_readme/","title":"Create readme","text":"<p>\u5e76\u63d0\u4f9b\u4e00\u4e2a\u82f1\u6587\u7684 README.md \u6587\u4ef6</p>"},{"location":"specs/00_init/","title":"00 init","text":""},{"location":"specs/00_init/#feature-spec-cookcodex-initial-vision","title":"Feature Spec: CookCodex Initial Vision","text":"<ul> <li>Status: Draft</li> <li>Owner: [Your Name]</li> </ul>"},{"location":"specs/00_init/#1-problem-statement","title":"1. Problem Statement","text":"<p>Developers and teams need a simple, maintainable way to publish CookCodex project documentation directly from their Markdown files in a Git repository.</p>"},{"location":"specs/00_init/#2-proposed-solution","title":"2. Proposed Solution","text":"<p>A documentation-first workflow system that uses a pre-defined directory structure. -   All documentation lives in the <code>/docs</code> folder. -   A static site generator (like MkDocs) will be used to build a beautiful, navigable website from the Markdown files. Please note: ignore all markdown files starting with <code>_</code>, which are used for internal purposes. -   A GitHub Actions workflow will automatically build and deploy the site to GitHub Pages on every push to the <code>main</code> branch.</p>"},{"location":"specs/00_init/#3-key-features","title":"3. Key Features","text":"<ul> <li>Automated deployment.</li> <li>Easy local preview.</li> <li>Based on the <code>CookCodex</code> methodology for maintainability.</li> </ul>"},{"location":"specs/_feature_template/","title":"feature template","text":""},{"location":"specs/_feature_template/#feature-spec-feature-name","title":"Feature Spec: [Feature Name]","text":"<ul> <li>Status: [Draft | In Review | Approved | Implemented]</li> <li>Owner: [Your Name]</li> <li>Date: YYYY-MM-DD</li> </ul>"},{"location":"specs/_feature_template/#1-problem-statement","title":"1. Problem Statement","text":"<p>What user problem or system limitation does this feature solve?</p>"},{"location":"specs/_feature_template/#2-proposed-solution","title":"2. Proposed Solution","text":"<p>A detailed description of how the feature will work from a user and system perspective.</p>"},{"location":"specs/_feature_template/#3-impact-on-architecture","title":"3. Impact on Architecture","text":"<p>Which agents or data flows will be added, removed, or modified?</p>"},{"location":"specs/_feature_template/#4-risks-and-open-questions","title":"4. Risks and Open Questions","text":"<p>What are the potential risks or unanswered questions related to this feature?</p>"},{"location":"specs/feature_template/","title":"Feature template","text":""},{"location":"specs/feature_template/#feature-spec-feature-name","title":"Feature Spec: [Feature Name]","text":"<ul> <li>Status: [Draft | In Review | Approved | Implemented]</li> <li>Owner: [Your Name]</li> <li>Date: YYYY-MM-DD</li> </ul>"},{"location":"specs/feature_template/#1-problem-statement","title":"1. Problem Statement","text":"<p>What user problem or system limitation does this feature solve?</p>"},{"location":"specs/feature_template/#2-proposed-solution","title":"2. Proposed Solution","text":"<p>A detailed description of how the feature will work from a user and system perspective.</p>"},{"location":"specs/feature_template/#3-impact-on-architecture","title":"3. Impact on Architecture","text":"<p>Which agents or data flows will be added, removed, or modified?</p>"},{"location":"specs/feature_template/#4-risks-and-open-questions","title":"4. Risks and Open Questions","text":"<p>What are the potential risks or unanswered questions related to this feature?</p>"}]}